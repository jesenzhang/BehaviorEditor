//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DebugSystem_DebugGameObjectComponent_IconLayoutWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(DebugSystem.DebugGameObjectComponent.IconLayout));
		L.RegVar("NONE", get_NONE, null);
		L.RegVar("RIGHT", get_RIGHT, null);
		L.RegVar("FILL", get_FILL, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<DebugSystem.DebugGameObjectComponent.IconLayout>.Check = CheckType;
		StackTraits<DebugSystem.DebugGameObjectComponent.IconLayout>.Push = Push;
	}

	static void Push(IntPtr L, DebugSystem.DebugGameObjectComponent.IconLayout arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(DebugSystem.DebugGameObjectComponent.IconLayout), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NONE(IntPtr L)
	{
		ToLua.Push(L, DebugSystem.DebugGameObjectComponent.IconLayout.NONE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIGHT(IntPtr L)
	{
		ToLua.Push(L, DebugSystem.DebugGameObjectComponent.IconLayout.RIGHT);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILL(IntPtr L)
	{
		ToLua.Push(L, DebugSystem.DebugGameObjectComponent.IconLayout.FILL);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		DebugSystem.DebugGameObjectComponent.IconLayout o = (DebugSystem.DebugGameObjectComponent.IconLayout)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

