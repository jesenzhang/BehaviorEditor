//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BehaviorDesigner_Runtime_Tasks_TaskStatusWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BehaviorDesigner.Runtime.Tasks.TaskStatus));
		L.RegVar("Inactive", get_Inactive, null);
		L.RegVar("Failure", get_Failure, null);
		L.RegVar("Success", get_Success, null);
		L.RegVar("Running", get_Running, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<BehaviorDesigner.Runtime.Tasks.TaskStatus>.Check = CheckType;
		StackTraits<BehaviorDesigner.Runtime.Tasks.TaskStatus>.Push = Push;
	}

	static void Push(IntPtr L, BehaviorDesigner.Runtime.Tasks.TaskStatus arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(BehaviorDesigner.Runtime.Tasks.TaskStatus), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Inactive(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.Tasks.TaskStatus.Inactive);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Failure(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.Tasks.TaskStatus.Failure);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Success(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.Tasks.TaskStatus.Success);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Running(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.Tasks.TaskStatus.Running);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BehaviorDesigner.Runtime.Tasks.TaskStatus o = (BehaviorDesigner.Runtime.Tasks.TaskStatus)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

