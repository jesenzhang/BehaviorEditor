// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace Example
{
    public partial class BehaviorValue
    {
        public enum ValueType
        {
            INTEGER = 0,
            FLOAT = 1,
            BOOLEAN = 2,
            STRING = 3,
        }

        public Example.BehaviorValue.ValueType valueType { get; set; }

        public int IntValue { get; set; }

        public float FloatValue { get; set; }

        public bool BoolValue { get; set; }

        public string StrValue { get; set; }

    }

    public partial class BehaviorVariable
    {
        public enum ValueType
        {
            INTEGER = 0,
            FLOAT = 1,
            BOOLEAN = 2,
            STRING = 3,
        }

        public string Name { get; set; }

        public Example.BehaviorVariable.ValueType valueType { get; set; }

        public int IntValue { get; set; }

        public float FloatValue { get; set; }

        public bool BoolValue { get; set; }

        public string StrValue { get; set; }

    }

    public partial class BehaviorAction
    {
        public enum ActionType
        {
            SCRIPT = 1,
            WAIT = 2,
            LOG = 3,
            RESTART_BEHAVIOR_TREE = 4,
            STOP_BEHAVIOR_TREE = 5,
            SET_VARIABLE = 6,
            RETURN_SUCCESS = 7,
            RETURN_FAILURE = 8,
            RANDOM_SUCCESS = 9,
            EXTERNAL_TREE = 10,
        }

        public int Id { get; set; }

        public Example.BehaviorAction.ActionType Type { get; set; }

        public List<Example.BehaviorValue> Args { get; set; }

    }

    public partial class BehaviorComposite
    {
        public enum CompositeType
        {
            SEQUENCE = 1,
            SELECTOR = 2,
            PARALLEL = 3,
        }

        public int Id { get; set; }

        public Example.BehaviorComposite.CompositeType Type { get; set; }

        public List<int> Children { get; set; }

    }

    public partial class BehaviorConditional
    {
        public enum CompareType
        {
            EQUAL = 0,
            NOT_EQUAL = 1,
            GREATER = 2,
            LESS = 3,
            TRIGGER = 4,
            IF_NOT = 5,
            IF = 6,
        }

        public int Id { get; set; }

        public string Name { get; set; }

        public Example.BehaviorConditional.CompareType Compare { get; set; }

        public Example.BehaviorValue Value { get; set; }

    }

    public partial class BehaviorDecorator
    {
        public enum DecoratorType
        {
            REPEATER = 1,
            UNTIL_SUCCESS = 2,
            UNTIL_FAILURE = 3,
            REVERTER = 4,
        }

        public int Id { get; set; }

        public Example.BehaviorDecorator.DecoratorType Type { get; set; }

        public List<Example.BehaviorValue> Args { get; set; }

        public int Child { get; set; }

    }

    public partial class BehaviorNode
    {
        public enum NodeType
        {
            ACTION = 1,
            COMPOSITE = 2,
            CONDITIONAL = 3,
            DECORATOR = 4,
        }

        public enum NodeState
        {
            INACTIVE = 0,
            FAILURE = 1,
            SUCCESS = 2,
            RUNNING = 3,
        }

        public int Id { get; set; }

        public Example.BehaviorNode.NodeType Type { get; set; }

        public string Name { get; set; }

        public int BehaviorID { get; set; }

        public bool Instant { get; set; }

    }

    public partial class BehaviorTree
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public int Group { get; set; }

        public List<Example.BehaviorVariable> Variables { get; set; }

        public List<Example.BehaviorNode> Nodes { get; set; }

        public List<Example.BehaviorAction> Actions { get; set; }

        public List<Example.BehaviorComposite> Composites { get; set; }

        public List<Example.BehaviorConditional> Conditionals { get; set; }

        public List<Example.BehaviorDecorator> Decorators { get; set; }

    }

}
